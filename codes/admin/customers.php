<?php
require_once '../../Database/db_config.php';
$customers = [];
$sql = "SELECT * FROM Customer ORDER BY CustomerID DESC";
$result = $conn->query($sql);
if ($result && $result->num_rows > 0) {
    while ($row = $result->fetch_assoc()) {
        $customers[] = [
            'id' => $row['CustomerID'],
            'name' => $row['CustomerName'],
            'phone' => $row['CustomerNumber'],
            'address' => $row['CustomerAddress'],
            'orders' => 0, // Placeholder, update if you have order data
            'lastOrder' => '-' // Placeholder, update if you have order data
        ];
    }
}

if (isset($_GET['fetch'])) {
    header('Content-Type: application/json');
    echo json_encode($customers);
    exit;
}
?>
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Clients - RJane Water Refilling Station</title>
    <link rel="stylesheet" href="../../Css/customers.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap"
        rel="stylesheet">
    <link rel="stylesheet" href="Sidebar.html">
</head>

<body>
    <div id="navbar"></div>

    <script>
        fetch('Sidebar.html')
            .then(response => response.text())
            .then(data => {
                document.getElementById('navbar').innerHTML = data;
            });
    </script>
    <div class="main-content">


        <!-- Client Management Header -->
        <div class="dashboard-header">
            <h2>Customer Management</h2>
            <button class="primary-btn" id="newClientBtn">
                <i class="fas fa-plus"></i> New Customer
            </button>
        </div>

        <!-- Filter Options -->
        <div class="filters-container">
            <div class="filter-options">
                <select class="filter-select">
                    <option>All Clients</option>
                </select>
            </div>
            <div class="view-options">
                <button class="view-btn active" data-view="grid"><i class="fas fa-th"></i></button>
                <button class="view-btn" data-view="list"><i class="fas fa-list"></i></button>
            </div>
        </div>

        <!-- Client Grid View -->
        <div class="client-grid" id="gridView">
            <!-- Client Cards will be generated by JavaScript -->
        </div>

        <!-- Client List View (Hidden by Default) -->
        <div class="client-list" id="listView" style="display: none;">
            <table class="clients-table">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Contact</th>
                        <th>Address</th>
                        <th>Orders</th>
                        <th>Last Order</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="clientTableBody">
                    <!-- Table rows will be generated by JavaScript -->
                </tbody>
            </table>
        </div>

        <!-- Pagination -->
        <div class="pagination">
            <button class="pagination-btn"><i class="fas fa-chevron-left"></i></button>
            <button class="pagination-btn active">1</button>
            <button class="pagination-btn">2</button>
            <button class="pagination-btn">3</button>
            <button class="pagination-btn"><i class="fas fa-chevron-right"></i></button>
        </div>
    </div>

    <!-- Add Client Modal -->
    <div class="modal" id="addClientModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Add New Client</h3>
                <button class="close-btn" id="closeModal">&times;</button>
            </div>
            <div class="modal-body">
                <form id="newClientForm">
                    <div class="form-group">
                        <label for="CustomerName">Customer Name</label>
                        <input type="text" id="CustomerName" name="CustomerName" required>
                    </div>
                    <div class="form-group">
                        <label for="CustomerNumber">Contact Number</label>
                        <input type="tel" id="CustomerNumber" name="CustomerNumber" required>
                    </div>
                    <div class="form-group">
                        <label for="CustomerAddress">Address</label>
                        <input type="text" id="CustomerAddress" name="CustomerAddress" required>
                    </div>
                    <!-- Add form actions -->
                    <div class="form-actions">
                        <button type="button" class="secondary-btn" id="cancelBtn">Cancel</button>
                        <button type="submit" class="primary-btn">Save Customer</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <script>
        // Load customers from PHP
        let clients = <?php echo json_encode($customers); ?>;

        // DOM Elements
        const gridView = document.getElementById('gridView');
        const listView = document.getElementById('listView');
        const clientTableBody = document.getElementById('clientTableBody');
        const viewButtons = document.querySelectorAll('.view-btn');
        const addClientModal = document.getElementById('addClientModal');
        const newClientBtn = document.getElementById('newClientBtn');
        const closeModalBtn = document.getElementById('closeModal');
        const cancelBtn = document.getElementById('cancelBtn');
        const newClientForm = document.getElementById('newClientForm');

        // Initialize the page
        document.addEventListener('DOMContentLoaded', function () {
            renderGridView();
            renderListView();
            setupEventListeners();
        });

        // Render client cards in grid view
        function renderGridView() {
            gridView.innerHTML = '';

            clients.forEach(client => {
                const card = document.createElement('div');
                card.className = 'client-card';

                const statusClass = '';
                const firstLetter = client.name.charAt(0);

                card.innerHTML = `
            <div class="client-card-header">
                <div class="client-avatar"><span>${firstLetter}</span></div>
            </div>
            <div class="client-card-body">
                <h3>${client.name}</h3>
                <p><i class="fas fa-phone"></i> ${client.phone}</p>
                <p><i class="fas fa-location-dot"></i> ${client.address}</p>
            </div>
            <div class="client-card-footer">
                <div class="client-stats">
                    <div>
                        <span>Orders</span>
                        <h4>${client.orders}</h4>
                    </div>
                    <div>
                        <span>Last Order</span>
                        <h4>${client.lastOrder}</h4>
                    </div>
                </div>
                <div class="client-actions">
                    <button title="View Details"><i class="fas fa-eye"></i></button>
                    <button title="Edit"><i class="fas fa-edit"></i></button>
                    <button title="Delete"><i class="fas fa-trash"></i></button>
                </div>
            </div>
        `;

                gridView.appendChild(card);
            });
        }

        // Render client data in table view
        function renderListView() {
            clientTableBody.innerHTML = '';

            clients.forEach(client => {
                const row = document.createElement('tr');
                const statusClass = '';

                row.innerHTML = `
            <td>${client.name}</td>
            <td>${client.phone}</td>
            <td>${client.address}</td>
            <td>${client.orders}</td>
            <td>${client.lastOrder}</td>
            <td>
                <div class="action-buttons">
                    <button title="View Details"><i class="fas fa-eye"></i></button>
                    <button title="Edit"><i class="fas fa-edit"></i></button>
                    <button title="Delete"><i class="fas fa-trash"></i></button>
                </div>
            </td>
        `;

                clientTableBody.appendChild(row);
            });
        }

        // Setup event listeners
        function setupEventListeners() {
            // View toggle buttons
            viewButtons.forEach(button => {
                button.addEventListener('click', function () {
                    const viewType = this.getAttribute('data-view');

                    // Update active button
                    viewButtons.forEach(btn => btn.classList.remove('active'));
                    this.classList.add('active');

                    // Show the selected view
                    if (viewType === 'grid') {
                        gridView.style.display = 'grid';
                        listView.style.display = 'none';
                    } else {
                        gridView.style.display = 'none';
                        listView.style.display = 'block';
                    }
                });
            });

            // Modal functionality
            newClientBtn.addEventListener('click', openModal);
            closeModalBtn.addEventListener('click', closeModal);
            cancelBtn.addEventListener('click', closeModal);

            // Close modal when clicking outside
            window.addEventListener('click', function (event) {
                if (event.target === addClientModal) {
                    closeModal();
                }
            });

            // Form submission
            newClientForm.addEventListener('submit', function (event) {
                event.preventDefault();

                const formData = {
                    name: document.getElementById('CustomerName').value,
                    phone: document.getElementById('CustomerNumber').value,
                    address: document.getElementById('CustomerAddress').value
                };

                try {
                    if (validateClientData(formData)) {
                        // AJAX request to add customer
                        fetch('../Controllers/add_customer.php', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(formData)
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                // Reload customers
                                fetchCustomers();
                                showNotification('Customer added successfully!');
                                closeModal();
                                newClientForm.reset();
                            } else {
                                showNotification(data.message || 'Failed to add customer', 'error');
                            }
                        })
                        .catch(() => showNotification('Server error', 'error'));
                    }
                } catch (error) {
                    showNotification(error.message, 'error');
                }
            });
        }

        // Fetch customers from server
        function fetchCustomers() {
            fetch('customers.php?fetch=1')
                .then(response => response.json())
                .then(data => {
                    clients = data;
                    renderGridView();
                    renderListView();
                });
        }

        // Add this function before the form submission handler
        function validateClientData(data) {
            // Accepts only 09XXXXXXXXX (11 digits)
            const phoneRegex = /^09\d{9}$/;

            if (data.name.length < 2) {
                throw new Error('Name must be at least 2 characters long');
            }

            if (!phoneRegex.test(data.phone)) {
                throw new Error('Phone number must start with 09 and be 11 digits');
            }

            if (data.address.length < 5) {
                throw new Error('Please enter a valid address');
            }

            return true;
        }

        // Open modal function
        function openModal() {
            addClientModal.classList.add('show');
            document.body.style.overflow = 'hidden'; // Prevent scrolling
        }

        // Close modal function
        function closeModal() {
            addClientModal.classList.remove('show');
            document.body.style.overflow = ''; // Re-enable scrolling
        }

        // Show notification function
        function showNotification(message, type = 'success') {
            const notification = document.createElement('div');
            notification.className = 'notification';
            notification.innerHTML = `
        <div class="notification-content">
            <i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-circle'}"></i>
            <span>${message}</span>
        </div>
    `;

            // Add styles
            notification.style.position = 'fixed';
            notification.style.top = '20px';
            notification.style.right = '20px';
            notification.style.backgroundColor = type === 'success' ? 'var(--success)' : 'var(--error)';
            notification.style.color = 'white';
            notification.style.padding = '12px 20px';
            notification.style.borderRadius = 'var(--border-radius)';
            notification.style.boxShadow = '0 4px 12px rgba(0, 0, 0, 0.1)';
            notification.style.display = 'flex';
            notification.style.alignItems = 'center';
            notification.style.zIndex = '2000';
            notification.style.transform = 'translateY(-20px)';
            notification.style.opacity = '0';
            notification.style.transition = 'all 0.3s ease';

            // Add to document
            document.body.appendChild(notification);

            // Show notification
            setTimeout(() => {
                notification.style.transform = 'translateY(0)';
                notification.style.opacity = '1';
            }, 100);

            // Remove after delay
            setTimeout(() => {
                notification.style.transform = 'translateY(-20px)';
                notification.style.opacity = '0';
                setTimeout(() => {
                    document.body.removeChild(notification);
                }, 300);
            }, 3000);
        }


    </script>


</body>

</html>
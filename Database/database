CREATE DATABASE IF NOT EXISTS waterproject;
USE waterproject;

-- 1. Customers
CREATE TABLE Customer (
    CustomerID INT PRIMARY KEY AUTO_INCREMENT,
    CustomerName VARCHAR(100) NOT NULL,
    CustomerNumber VARCHAR(12) NOT NULL,
    CustomerAddress VARCHAR(255) NOT NULL
);

-- 2. Containers 
CREATE TABLE Container (
    ContainerID INT PRIMARY KEY AUTO_INCREMENT,
    ContainerType VARCHAR(50) NOT NULL,
    ContainerCapacity DECIMAL(10,2) NOT NULL,
    ContainerStatus VARCHAR(50) NOT NULL,
    Stocks INT NOT NULL DEFAULT 0
);

-- 3. Products
CREATE TABLE Product (
    ProductID INT PRIMARY KEY AUTO_INCREMENT,
    ProductName VARCHAR(100) NOT NULL,
    ProductPrice DECIMAL(10,2) NOT NULL,
    ProductDescription TEXT,
    ProductStatus VARCHAR(50) NOT NULL,
    Stocks INT NOT NULL DEFAULT 0,
    ContainerID INT,
    FOREIGN KEY (ContainerID) 
        REFERENCES Container(ContainerID)
);

-- 4. Employees
CREATE TABLE Employee (
    EmployeeID INT PRIMARY KEY AUTO_INCREMENT,
    FirstName VARCHAR(50) NOT NULL,
    LastName VARCHAR(50) NOT NULL,
    EmployeePosition VARCHAR(50) NOT NULL,
    EmployeeNumber VARCHAR(12) NOT NULL,
    EmployeeStatus VARCHAR(50) NOT NULL,
    Username VARCHAR(50) NOT NULL,
    Password VARCHAR(255) NOT NULL,
    DateJoined DATE NULL
);

-- 5. Transactions
CREATE TABLE Transaction (
    TransactionID INT PRIMARY KEY AUTO_INCREMENT,
    CustomerID INT,
    ProductID   INT,
    Price DECIMAL(10,2) NOT NULL,
    Quantity INT NOT NULL,
    PaymentMethod VARCHAR(50),
    DeliveryStatus VARCHAR(50),
    DeliveryMethod VARCHAR(50),
<<<<<<< HEAD
    TransactionDate DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP, 
    FOREIGN KEY (CustomerID) REFERENCES Customer(CustomerID),
     Status VARCHAR(50) DEFAULT active;
=======
    TransactionDate DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (CustomerID) 
        REFERENCES Customer(CustomerID),
    FOREIGN KEY (ProductID)
        REFERENCES Product(ProductID)
>>>>>>> aef4b0116ff4799b1810f9d3f12f3ff2749f344b
);

-- 6. Expense types
CREATE TABLE ExpenseTypes (
    ExpenseTypeID INT PRIMARY KEY AUTO_INCREMENT,
    TypeName VARCHAR(100) NOT NULL,
    Category VARCHAR(100)
);

-- 7. Logged expenses
CREATE TABLE LoggedExpenses (
    ExpensesID INT PRIMARY KEY AUTO_INCREMENT,
    ExpenseTypeID INT,
    Amount DECIMAL(10,2) NOT NULL,
    ExpenseDate DATE NOT NULL,
    Description TEXT,
    FOREIGN KEY (ExpenseTypeID) 
        REFERENCES ExpenseTypes(ExpenseTypeID)
);

-- 8. Reports 
CREATE TABLE Reports (
    ReportID INT PRIMARY KEY AUTO_INCREMENT,
    ContainerID INT,
    ProductID   INT,
    ExpensesID  INT,
    Stocks_Added INT NOT NULL DEFAULT 0,
    Stocks_Added_Date DATE NOT NULL,
    FOREIGN KEY (ContainerID) 
        REFERENCES Container(ContainerID),
    FOREIGN KEY (ProductID) 
        REFERENCES Product(ProductID),
    FOREIGN KEY (ExpensesID) 
        REFERENCES LoggedExpenses(ExpensesID)
);

-- Inserts
-- Populate Containers
INSERT INTO Containers (ContainerID, ContainerType, ContainerCapacity_L, ContainerStatus, Stocks) VALUES
  (1, '5 Gallon', 20.00, 'Available', 20),
  (2, 'Plastic',  0.50, 'Available', 50);

-- Populate Products
INSERT INTO Products (ProductID, ProductName,          ProductPrice, ProductDescription,               ProductStatus, Stocks, ContainerID) VALUES
  (1, 'Mineral Water',           35.00, 'Natural minerals and electrolytes', 'Available',  7, 1),
  (2, 'Purified Water',          25.00, 'Clean and pure drinking water',       'Available',  9, 1),
  (3, 'Alkaline Water',          45.00, 'Higher pH for balanced health',       'Available', 20, 1),
  (4, 'Distilled Water',         30.00, 'Pure H2O with no minerals',           'Available', 19, 1),
  (5, 'Mineral Water Bottle',    15.00, 'Natural minerals and electrolytes', 'Available', 48, 2),
  (6, 'Purified Water Bottle',   12.00, 'Clean and pure drinking water',       'Available', 50, 2),
  (7, 'Alkaline Water Bottle',   18.00, 'Higher pH for balanced health',       'Available', 49, 2),
  (8, 'Distilled Water Bottle',  14.00, 'Pure H2O with no minerals',           'Available', 50, 2);